{"version":3,"sources":["Redux/ActionConstants/index.js","Components/common/AccordionComponent.js","utils/Utils.js","Components/SmartDropDownSearch.js","Components/App.js","Redux/Reducers/countryReducer.js","Redux/Reducers/index.js","utils/Axios.js","utils/Services.js","utils/Constants.js","Redux/Saga/countrySaga.js","Redux/Saga/index.js","Redux/Store/store.js","index.js"],"names":["Constants","AccordionComponent","props","Accordion","defaultActiveKey","Card","Toggle","eventKey","title","className","Collapse","Body","children","filterCountries","countryList","CountryInput","displayCountryList","country","indexOf","push","SmartDropDownSearch","searchCountry","value","a","setState","state","increaseDispLimit","newlimit","displayLimit","noOfItems","fnAddCountry","disableAddBtn","addAndSelectHandler","this","searchField","focus","prevProps","privilidge","aria-hidden","type","onChange","e","target","ref","d","slice","map","index","key","onClick","length","disabled","Component","App","flag","addnewCountry","selectedCountry","fnAddCountryHandler","response","status","alert","getCountryList","changeUser","val","loggedInAs","county_list","add_country_response","connect","countryReducer","dispatch","countryName","payload","initialState","rootReducer","combineReducers","action","axios","create","baseURL","responseType","API","path","Axios","get","CountryWatcherSaga","getCountyList","Store","data","countries","addNewCountry","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","composedEhancer","composeWithDevTools","applyMiddleware","createStore","run","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.6619fe5a.chunk.js","sourcesContent":["export const Constants={\n  GET_COUNTRY_LIST: 'GET_COUNTRY_LIST',\n  SET_COUNTRY_LIST: 'SET_COUNTRY_LIST',\n  ADD_NEW_COUNTRY: 'ADD_NEW_COUNTRY',\n  SET_ADD_COUNTRY_RESPONSE:'ADD_COUNTRY'\n};","import React from 'react';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nfunction AccordionComponent(props){\r\n  return(\r\n    <Accordion defaultActiveKey=\"0\">\r\n      <Card>\r\n        <Accordion.Toggle eventKey=\"0\">\r\n          {props.title}\r\n          <i className=\"fa fa-angle-down\"></i>\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Body>\r\n            {props.children}\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport default AccordionComponent;","export function filterCountries(countryList,CountryInput){\r\n  let displayCountryList = [];\r\n  for(let country of countryList){\r\n    if(country.indexOf(CountryInput) > -1){\r\n      displayCountryList.push(country);\r\n    }\r\n  }\r\n  return displayCountryList;\r\n}","import React, { Component } from 'react';\r\nimport AccordionComponent from './common/AccordionComponent'\r\nimport { filterCountries } from '../utils/Utils';\r\n\r\nclass SmartDropDownSearch extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      CountryInput:'',\r\n      displayCountryList: this.props.countryList,\r\n      displayLimit: this.props.noOfItems,\r\n      disableAddBtn: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.searchField.focus()\r\n  }\r\n\r\n  async componentDidUpdate(prevProps){\r\n    if(prevProps.countryList !== this.props.countryList){\r\n      if(this.props.countryList){\r\n        await this.setState({\r\n          displayCountryList : this.props.countryList,\r\n          disableAddBtn: false\r\n        });\r\n        this.searchCountry(this.state.CountryInput)\r\n      }\r\n    }\r\n  }\r\n\r\n  searchCountry = async value => {\r\n    await this.setState({CountryInput : value});\r\n    const countryList = this.props.countryList;\r\n    const CountryInput = this.state.CountryInput;\r\n    const displayCountryList = filterCountries(countryList,CountryInput);\r\n    this.setState({displayCountryList});\r\n  }\r\n\r\n  increaseDispLimit = () => {\r\n    const oldLimit = this.state.displayLimit;\r\n    const newlimit = oldLimit + this.props.noOfItems;\r\n    this.setState({displayLimit: newlimit})\r\n  }\r\n\r\n  fnAddCountry = async () => {\r\n    const { CountryInput } = this.state;\r\n    await this.setState({\r\n      disableAddBtn: true\r\n    });\r\n    this.props.addAndSelectHandler(CountryInput, 'Add');\r\n  }\r\n\r\n  render(){\r\n    const { CountryInput, displayCountryList, displayLimit, disableAddBtn } = this.state;\r\n    const { noOfItems, privilidge, addAndSelectHandler } = this.props;\r\n    return (\r\n      <div className=\"smart-search\">\r\n        <AccordionComponent title=\"Select a location\">\r\n          <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n          <input type=\"text\" value={CountryInput}\r\n            onChange={e => this.searchCountry(e.target.value)}\r\n            ref={d=>this.searchField=d}\r\n            />\r\n          <div className=\"search-result\">\r\n            {displayCountryList.slice(0, displayLimit).map((country,index) => (\r\n                <li key={index} onClick={()=>addAndSelectHandler(country, 'Select')}>{country}</li>\r\n            ))}\r\n            {displayCountryList.length>displayLimit &&\r\n              <p onClick={this.increaseDispLimit}>{`${noOfItems} more...`}</p>\r\n            }\r\n            {displayCountryList.length === 0 && CountryInput !== \"\"  && \r\n              <li className=\"mt-1\" disabled>\r\n                {`\"${CountryInput}\" not found`}\r\n                {privilidge && <button className=\"add-select\" onClick={this.fnAddCountry} disabled={disableAddBtn}>Add & select</button>}\r\n              </li>\r\n            }\r\n          </div>\r\n        </AccordionComponent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SmartDropDownSearch;\r\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Constants } from '../Redux/ActionConstants'\nimport SmartDropDownSearch from './SmartDropDownSearch';\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      countryList : [],\n      selectedCountry : '',\n      privilidge : true,\n      noOfItems : 5,\n      loggedInAs: 'admin'\n    }\n  }\n\n  componentDidMount() {\n    this.props.getCountryList();\n  }\n\n  async componentDidUpdate(prevProps){\n    if(prevProps.county_list !== this.props.county_list){\n      if(this.props.county_list){\n        this.setState({ countryList : this.props.county_list});\n      }\n    }\n    \n    if(prevProps.add_country_response !== this.props.add_country_response){\n      if(this.props.add_country_response){\n        this.fnAddCountryHandler(this.props.add_country_response);\n      }\n    }\n  }\n\n  addAndSelectHandler = async (CountryInput, flag) => {\n    if(flag === \"Add\"){  // In case user clicks on Add Button\n      this.props.addnewCountry(CountryInput);\n    }\n    else if(flag === \"Select\") { // In case user selects any country\n      this.setState({selectedCountry : CountryInput})\n    }\n  }\n\n  fnAddCountryHandler = (response) => {\n    if(response.status === 500){\n      alert(\"Adding duplicate coutnries are not allowed !!!\");\n      return false;\n     }\n\n    alert(\"Added Successfully !!!\");\n    this.props.getCountryList();\n  }\n\n  changeUser = val => {\n    const privilidge = (val === 'admin') ? true : false;\n    this.setState({loggedInAs: val, privilidge})\n  }\n\n  render(){\n    const { countryList, selectedCountry, privilidge, noOfItems, loggedInAs } = this.state;\n    \n    return (\n      <div className=\"App\">\n        <div className=\"loginSection\">\n          Logged In As :\n          <p className={(loggedInAs==='admin')?'active':''}\n            onClick={()=>this.changeUser('admin')}>\n            Admin\n          </p>\n          |\n          <p className={(loggedInAs==='user')?'active':''} \n            onClick={()=>this.changeUser('user')}>\n            User\n          </p>\n        </div>\n        <SmartDropDownSearch countryList={countryList} privilidge={privilidge} noOfItems={noOfItems} addAndSelectHandler={this.addAndSelectHandler} />\n        <br/>\n        <p>{`Selected Country : ${selectedCountry}`}</p>\n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    county_list: state.countryReducer.county_list,\n    add_country_response: state.countryReducer.add_country_response\n  }\n};\nconst mapDispatchToProps = (dispatch) => ({\n  getCountryList: () => dispatch({ type: Constants.GET_COUNTRY_LIST }),\n  addnewCountry: countryName => dispatch({ type: Constants.ADD_NEW_COUNTRY, payload: countryName })\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Constants } from '../ActionConstants';\n\nexport const initialState = {\n  county_list: '',\n  add_country_response: ''\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case Constants.SET_COUNTRY_LIST:\n      state = {\n        ...state,\n        county_list: action.payload\n      }\n      return state;\n    case Constants.SET_ADD_COUNTRY_RESPONSE:\n    state = {\n      ...state,\n      add_country_response: action.payload\n    }\n    return state; \n    default:\n      return state;\n  }\n};","import { combineReducers } from 'redux';\nimport countryReducer from './countryReducer';\n\nconst rootReducer = combineReducers({\n  countryReducer,\n});\n\nexport default rootReducer;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://13.57.235.126:5000/\",\r\n  responseType: \"json\"\r\n});","import Axios from './Axios';\r\n\r\nexport default async function API(path,value){\r\n  try{\r\n    const response = await Axios.get(path+value);\r\n    return response;\r\n  }\r\n  catch (e){\r\n    alert(\"Internal Server Error. Please try again later.\")\r\n  }\r\n\r\n}","export const GET_COUNTRY_LIST_PATH = 'countries';\r\nexport const ADD_NEW_COUNTRY_PATH = '/addcountry?name='","import { takeEvery } from 'redux-saga/effects';\r\nimport { Constants } from '../ActionConstants';\r\nimport Store from '../Store/store';\r\nimport API from '../../utils/Services';\r\nimport { GET_COUNTRY_LIST_PATH, ADD_NEW_COUNTRY_PATH } from '../../utils/Constants';\r\n\r\nasync function getCountyList(){\r\n  const response = await API(GET_COUNTRY_LIST_PATH,\"\");\r\n  \r\n  if(!response) return false;\r\n\r\n  if(response.status !== 200){\r\n   alert(\"Internal Server Error. Please try again later.\");\r\n   return false;\r\n  }\r\n\r\n  Store.dispatch({\r\n    type: Constants.SET_COUNTRY_LIST,\r\n    payload: response.data.countries\r\n  })\r\n}\r\n\r\nasync function addNewCountry(action){\r\n  const response = await API(ADD_NEW_COUNTRY_PATH,action.payload);\r\n  \r\n  if(!response) return false;\r\n\r\n  Store.dispatch({\r\n    type: Constants.SET_ADD_COUNTRY_RESPONSE,\r\n    payload: response\r\n  })\r\n}\r\n\r\nexport function* CountryWatcherSaga() {\r\n  yield takeEvery(Constants.GET_COUNTRY_LIST, getCountyList);\r\n  yield takeEvery(Constants.ADD_NEW_COUNTRY, addNewCountry);\r\n}","import { all } from 'redux-saga/effects';\n\nimport { CountryWatcherSaga } from './countrySaga';\n\nexport default function* rootSaga() {\n  yield all([\n    CountryWatcherSaga()\n  ]);\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from '../Reducers';\r\nimport rootSaga from '../Saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst composedEhancer = composeWithDevTools(\r\n  applyMiddleware(sagaMiddleware),\r\n)\r\nconst initialState = {};\r\n\r\nconst Store = createStore(rootReducer, initialState, composedEhancer)\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default Store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"font-awesome/css/font-awesome.css\"\nimport './index.css';\nimport App from './Components/App';\nimport Store from './Redux/Store/store';\n\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}
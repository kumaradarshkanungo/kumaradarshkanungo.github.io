{"version":3,"sources":["GameComponents/Numbers.jsx","GameComponents/Stars.jsx","GameComponents/Button.jsx","GameComponents/Answer.jsx","GameComponents/DoneFrame.jsx","GameComponents/Game.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Numbers","_this","this","react_default","a","createElement","className","list","map","number","i","key","props","selectedNumbers","indexOf","usedNumbers","numberClassName","onClick","selectNumber","Component","_","range","Stars","numberOfStars","Button","button","answerIsCorrect","acceptAnswer","checkAnswer","disabled","length","redraw","redraws","Answer","unselectNumber","DoneFrame","doneStatus","possibleCombinationSum","arr","n","pop","listSize","combinationsCount","combinationSum","j","Game","state","randomNumber","clickedNumber","setState","prevState","concat","filter","reduce","acc","updateDoneStatus","possibleSolutions","possibleNumbers","_this$state","GameComponents_Stars","GameComponents_Button","GameComponents_Answer","GameComponents_DoneFrame","GameComponents_Numbers","Math","floor","random","App","GameComponents_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.015ed367.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nclass Numbers extends Component {\r\n    render(){\r\n        const numberClassName = (number) =>{\r\n            if(this.props.selectedNumbers.indexOf(number) >= 0){\r\n                return \"selected\";\r\n            }\r\n            if(this.props.usedNumbers.indexOf(number) >= 0){\r\n                return \"used\";\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"card text-center\" >\r\n                <div>\r\n                    {Numbers.list.map((number,i) => \r\n                        <span key={i} className={numberClassName(number)} onClick={() => this.props.selectNumber(number)}>{number}</span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nNumbers.list = _.range(1,10);\r\nexport default Numbers;","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport Numbers from './Numbers';\r\n\r\nclass Stars extends Component {\r\n\r\n    render(){\r\n        // const numberOfStars = 1+Math.floor(Math.random()*9);\r\n\r\n        // let stars = [];\r\n        // for(let i=0; i< numberOfStars;i++){\r\n        //     stars.push(<i className=\"fa fa-star\"></i>)\r\n        // }\r\n\r\n        return(\r\n            <div className=\"col-5\">\r\n                {_.range(this.props.numberOfStars).map(i => \r\n                    <i className=\"fa fa-star\" key={i}></i>   \r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Stars;","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    render(){\r\n        let button;\r\n        switch(this.props.answerIsCorrect){\r\n            case true:\r\n                button = \r\n                    <button className=\"btn btn-success\" onClick={this.props.acceptAnswer}>\r\n                        <i className=\"fa fa-check\"></i>\r\n                    </button>\r\n            break;\r\n            case false:\r\n                button =\r\n                    <button className=\"btn btn-danger\">\r\n                        <i className=\"fa fa-times\"></i>\r\n                    </button>\r\n            break;\r\n            default:\r\n                button =\r\n                    <button className=\"btn\" onClick={this.props.checkAnswer} disabled={this.props.selectedNumbers.length === 0}>\r\n                    = \r\n                    </button>\r\n        }\r\n        return(\r\n            <div className=\"col-2\">\r\n                {button}\r\n                <br /> <br />\r\n                <button className=\"btn btn-warning btn-sm\" onClick={this.props.redraw} disabled={this.props.redraws === 0}>\r\n                    <i className=\"fa fa-sync\"></i> {this.props.redraws}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\nclass Answer extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"col-5\">\r\n                {this.props.selectedNumbers.map((number,i) =>\r\n                    <span key={i} onClick={() => this.props.unselectNumber(number)}>{number}</span>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Answer;","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nclass DoneFrame extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"text-center\" >\r\n               <h2>{this.props.doneStatus}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DoneFrame;","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport Stars from './Stars';\r\nimport Button from './Button';\r\nimport Answer from './Answer';\r\nimport Numbers from './Numbers';\r\nimport DoneFrame from './DoneFrame';\r\n\r\nvar possibleCombinationSum = function(arr, n) {\r\n    // alert(arr,n)\r\n    if (arr.indexOf(n) >= 0) { return true; }\r\n    if (arr[0] > n) { return false; }\r\n    if (arr[arr.length - 1] > n) {\r\n      arr.pop();\r\n      return possibleCombinationSum(arr, n);\r\n    }\r\n    var listSize = arr.length, combinationsCount = (1 << listSize)\r\n    for (var i = 1; i < combinationsCount ; i++ ) {\r\n      var combinationSum = 0;\r\n      for (var j=0 ; j < listSize ; j++) {\r\n        if (i & (1 << j)) { combinationSum += arr[j]; }\r\n      }\r\n      if (n === combinationSum) { return true; }\r\n    }\r\n    return false;\r\n  };\r\n\r\nclass Game extends Component {\r\n    static randomNumber = () => 1+Math.floor(Math.random()*9)\r\n    state = {\r\n        selectedNumbers: [],\r\n        numberOfStars : Game.randomNumber(),\r\n        answerIsCorrect : null,\r\n        usedNumbers: [],\r\n        redraws: 5,\r\n        doneStatus: null\r\n    }\r\n\r\n    selectNumber = (clickedNumber) => {\r\n        if(this.state.selectedNumbers.indexOf(clickedNumber) >= 0){\r\n            return;\r\n        }\r\n        if(this.state.usedNumbers.indexOf(clickedNumber) >= 0){\r\n            return;\r\n        }\r\n        this.setState(prevState => ({\r\n            selectedNumbers: prevState.selectedNumbers.concat(clickedNumber),\r\n            answerIsCorrect : null\r\n        }));\r\n    }\r\n\r\n    unselectNumber = (clickedNumber) => {\r\n        this.setState(prevState => ({\r\n            selectedNumbers: prevState.selectedNumbers.filter(number => number !== clickedNumber),\r\n            answerIsCorrect : null\r\n        }));\r\n    }\r\n\r\n    checkAnswer = () => {\r\n        this.setState(prevState => ({\r\n            answerIsCorrect: prevState.numberOfStars === prevState.selectedNumbers.reduce((acc,n) => acc+n,0)\r\n        }))\r\n    }\r\n\r\n    acceptAnswer = () => {\r\n        this.setState(prevState => ({\r\n            usedNumbers: prevState.usedNumbers.concat(prevState.selectedNumbers),\r\n            selectedNumbers : [],\r\n            answerIsCorrect : null,\r\n            numberOfStars : Game.randomNumber(),\r\n        }),()=>this.updateDoneStatus())\r\n    }\r\n\r\n    redraw = () => {\r\n        if(this.state.redraws === 0){\r\n            return\r\n        }\r\n        this.setState(prevState => ({   \r\n            selectedNumbers : [],\r\n            answerIsCorrect : null,\r\n            numberOfStars : Game.randomNumber(),\r\n            redraws: prevState.redraws - 1\r\n        }),()=>this.updateDoneStatus());\r\n    }\r\n\r\n    possibleSolutions = () => {\r\n        const possibleNumbers = _.range(1,10).filter(number=>\r\n            this.state.usedNumbers.indexOf(number) === -1    \r\n        )\r\n\r\n        return possibleCombinationSum(possibleNumbers, this.state.numberOfStars)\r\n    }\r\n\r\n    updateDoneStatus = () => {\r\n        if(this.state.usedNumbers.length === 9){\r\n            this.setState({\r\n                doneStatus: \"Done.Nice!\"\r\n            });\r\n            return;\r\n        }\r\n        if( !(this.possibleSolutions()) && this.state.redraws === 0){\r\n            this.setState({\r\n                doneStatus: \"Game Over!\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {selectedNumbers, numberOfStars, answerIsCorrect, usedNumbers, redraws, doneStatus} = this.state;\r\n        return(\r\n            <div className=\"container\">\r\n                <h3>Play Nine</h3>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <Stars  numberOfStars={numberOfStars}         />\r\n                    <Button redraws={redraws}\r\n                            redraw={this.redraw}\r\n                            acceptAnswer={this.acceptAnswer}\r\n                            answerIsCorrect={answerIsCorrect}\r\n                            checkAnswer={this.checkAnswer}\r\n                            selectedNumbers={selectedNumbers}     />\r\n                    <Answer selectedNumbers={selectedNumbers}\r\n                            unselectNumber={this.unselectNumber}  />\r\n                </div>\r\n                <br         />\r\n                {doneStatus ? \r\n                    <DoneFrame doneStatus={doneStatus} /> :\r\n                    <Numbers    usedNumbers={usedNumbers}\r\n                            selectedNumbers={selectedNumbers}\r\n                            selectNumber={this.selectNumber}      />\r\n                }\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\n\r\n//Game Components\r\nimport Game from './GameComponents/Game';\r\nimport \"./App.css\"\r\nimport Bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.css'\r\n\r\nclass App extends Component {\r\n    render(){\r\n        return(\r\n            <Game />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}